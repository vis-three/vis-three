import{_ as e,o as t,c as s,O as a}from"./chunks/framework.c4814614.js";const u=JSON.parse('{"title":"Not Just Three.js","description":"","frontmatter":{},"headers":[],"relativePath":"en/start/more.md","filePath":"en/start/more.md"}'),o={name:"en/start/more.md"},r=a('<h1 id="not-just-three-js" tabindex="-1">Not Just Three.js <a class="header-anchor" href="#not-just-three-js" aria-label="Permalink to &quot;Not Just Three.js&quot;">â€‹</a></h1><p>From the previous discussions, we can see that <code>vis-three</code> primarily provides a set of development processes and mechanisms, namely: plugin-based, strategy-based, and configuration-based concepts and mechanisms.</p><p>Leaving <code>three.js</code> aside, if we only use the concepts and mechanisms of <strong>plugin-based</strong>, <strong>strategy-based</strong>, and * <em>configuration-based</em>* frameworks, theoretically, it should be adaptable to any library or framework that requires * <em>plugin-based</em>*, <strong>strategy-based</strong>, and <strong>configuration-based</strong> approaches.</p><p>So, what sparks might fly when combining with libraries like <code>Babylon.js</code>, <code>d3.js</code>, and others? We look forward to your experimentation.</p>',4),n=[r];function i(d,c,h,m,p,l){return t(),s("div",null,n)}const g=e(o,[["render",i]]);export{u as __pageData,g as default};
