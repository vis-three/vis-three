import{_ as e,o as a,c as o,O as t}from"./chunks/framework.b643d968.js";const v=JSON.parse('{"title":"安装","description":"","frontmatter":{},"headers":[],"relativePath":"start/install.md","filePath":"start/install.md"}'),r={name:"start/install.md"},s=t(`<h1 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h1><h2 id="工程环境" tabindex="-1">工程环境 <a class="header-anchor" href="#工程环境" aria-label="Permalink to &quot;工程环境&quot;">​</a></h2><p><code>vis-three</code>推荐使用类似<code>npm</code> + 支持<code>es module</code>的开发环境，因为这套开发体系已经通过了很多项目的验证。</p><h2 id="版本" tabindex="-1">版本 <a class="header-anchor" href="#版本" aria-label="Permalink to &quot;版本&quot;">​</a></h2><p><code>vis-three</code> 目前还处于快速开发迭代中。目前的大版本号为：<code>0.6</code></p><h2 id="安装-three-js" tabindex="-1">安装 three.js <a class="header-anchor" href="#安装-three-js" aria-label="Permalink to &quot;安装 three.js&quot;">​</a></h2><p><code>vis-three</code>依赖于<code>three</code>，但是不强制依赖某一个特定版本，最优的依赖版本是官网示例的<code>three</code>版本，所以在安装<code>vis-three</code>之前，需要先安装<code>three</code>。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i three</span></span>
<span class="line"><span style="color:#e1e4e8;">npm i @types/three -D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">npm i three</span></span>
<span class="line"><span style="color:#24292e;">npm i @types/three -D</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>目前所有示例所使用的 three.js 版本为：<code>^0.141.0</code>——<code>npm i three@^0.141.0</code></p></div><h2 id="安装-vis-three" tabindex="-1">安装 vis-three <a class="header-anchor" href="#安装-vis-three" aria-label="Permalink to &quot;安装 vis-three&quot;">​</a></h2><p><code>vis-three</code>框架的引擎功能构建方式是通过组装的形式进行，通过不同的组装集成，构建不同的引擎功能，进而服务不同的业务需要。</p><p>文档会通过后面的示例渐进式的引导读者了解<code>vis-three</code>的组装构建模式，下面先介绍一下<code>vis-three</code>所含的包结构与分类。</p><h3 id="引擎核心" tabindex="-1">引擎核心 <a class="header-anchor" href="#引擎核心" aria-label="Permalink to &quot;引擎核心&quot;">​</a></h3><p><code>@vis-three/core</code></p><p>引擎核心提供了组装式底层应用逻辑和 3D 引擎的基础 API，是所有包的基础依赖。</p><h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h3><p><code>@vis-three/plugin-xxx</code></p><p>插件的作用是给引擎添加新功能和新能力，官方提供的所有插件包都是以<code>@vis-three/plugin-</code>开头。</p><h3 id="策略" tabindex="-1">策略 <a class="header-anchor" href="#策略" aria-label="Permalink to &quot;策略&quot;">​</a></h3><p><code>@vis-three/strategy-xxx</code></p><p>策略是联调不同的插件功能和能力去完成一项具体的事情或者具体的业务功能，官方提供的所有策略包都是以<code>@vis-three/strategy-</code>开头。</p><h3 id="配置化核心" tabindex="-1">配置化核心 <a class="header-anchor" href="#配置化核心" aria-label="Permalink to &quot;配置化核心&quot;">​</a></h3><p><code>@vis-three/middleware</code></p><p>配置化核心是在引擎核心的基础上，集成了配置化的基础逻辑和 API 的底座。</p><h3 id="配置化模块" tabindex="-1">配置化模块 <a class="header-anchor" href="#配置化模块" aria-label="Permalink to &quot;配置化模块&quot;">​</a></h3><p><code>@vis-three/module-xxx</code></p><p>配置化模块是根据不同的功能需要，进而实现的各种<code>配置</code> -&gt;<code>实例</code>的逻辑模块。</p><h3 id="便利工具" tabindex="-1">便利工具 <a class="header-anchor" href="#便利工具" aria-label="Permalink to &quot;便利工具&quot;">​</a></h3><p><code>@vis-three/convenient</code></p><p>便利工具是官方在项目活动中遇到的可抽离的各种实用工具的集合库。</p><h3 id="工具库" tabindex="-1">工具库 <a class="header-anchor" href="#工具库" aria-label="Permalink to &quot;工具库&quot;">​</a></h3><p><code>@vis-three/utils</code></p><p>工具库是为整个<code>vis-three</code>开发服务的代码逻辑库。</p><h3 id="衍生库" tabindex="-1">衍生库 <a class="header-anchor" href="#衍生库" aria-label="Permalink to &quot;衍生库&quot;">​</a></h3><p><code>@vis-three/library-xxx</code></p><p>衍生库是官方提供与 3D 应用相关的集合库，方便快速查找引入，官方提供的所有衍生库都是以<code>@vis-three/library-</code>开头。</p><h3 id="预置引擎" tabindex="-1">预置引擎 <a class="header-anchor" href="#预置引擎" aria-label="Permalink to &quot;预置引擎&quot;">​</a></h3><p><code>@vis-three/engine-xxx</code></p><p>预置引擎是官方根据不同应用场景所组装的引擎，方便快速的引入开发和调试，官方提供的所有预置引擎都是以<code>@vis-three/engine-</code>开头。</p>`,39),c=[s];function d(i,h,l,n,p,u){return a(),o("div",null,c)}const m=e(r,[["render",d]]);export{v as __pageData,m as default};
